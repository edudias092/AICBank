trigger:
  - release/*

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  CelCash_galaxId: ${{ variables.CelCash_galaxId }}
  CelCash_galaxHash: ${{ variables.CelCash_galaxHash }}
  CelCash_baseUrl: ${{ variables.CelCash_baseUrl }}
  JWT_TokenValidityInMinutes: ${{ variables.JWT_TokenValidityInMinutes }}
  JWT_SecretKey: ${{ variables.JWT_SecretKey }}
  JWT_Issuer: ${{ variables.JWT_Issuer }}
  JWT_Audience: ${{ variables.JWT_Audience }}
  ConnectionStrings_AICBankDbConnString: ${{ variables.ConnectionStrings_AICBankDbConnString }}
  Email_Smtp: ${{ variables.Email_Smtp }}
  Email_Port: ${{ variables.Email_Port }}
  Email_User: ${{ variables.Email_User }}
  Email_Password: ${{ variables.Email_Password }}

steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.303'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - script: |
      dotnet restore
    displayName: 'Restaurar pacotes Nuget'

  - script: |
      dotnet build --configuration $(buildConfiguration)
    displayName: 'Build'

  - script: |
      dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
    displayName: 'Publish'
    
  # Tarefa FileTransform para aplicar transformações no appsettings.json
  - task: FileTransform@1
    inputs:
      folderPath: '$(Build.ArtifactStagingDirectory)'  # Pasta com os artefatos
      fileType: 'json'  # Tipo de arquivo que será transformado (appsettings.json é JSON)
      targetFiles: '**/appsettings.json'  # Arquivo alvo que será transformado
      transformType: 'VariableSubstitution'  # Substituir variáveis no arquivo
    displayName: 'Substituir variáveis no appsettings.json'
    
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: 'drop'
      #publishLocation: 'Container'

  - task: DownloadSecureFile@1  # Baixar a chave privada no pipeline
    inputs:
      secureFile: 'id_rsa'  # Nome do arquivo secure

  - script: |
      mkdir -p ~/.ssh
      cp $(Agent.TempDirectory)/id_rsa ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa

      # Usar SCP para copiar os arquivos para o servidor VPS
      scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r $(Build.ArtifactStagingDirectory)/* root@207.244.247.46:/sistemas/aicbank/api
    displayName: 'Copiar arquivos para o VPS'

  # - script: |
  #     mkdir -p ~/.ssh
  #     cp $(Agent.TempDirectory)/id_rsa ~/.ssh/id_rsa
  #     chmod 600 ~/.ssh/id_rsa
      
  #     ssh -i ~/.ssh/id_rsa root@207.244.247.46
  #     sudo systemctl restart sistema-agendamentos
  #   displayName: 'Reiniciar o Serviço'
